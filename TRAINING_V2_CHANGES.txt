================================================================================
MAJOR ARCHITECTURE CHANGES - TRAINING V2
================================================================================

Date: October 27, 2025
Problem: Model overfitting to specific stock positions (ENPH #291/308 momentum, 
         NI #218/308 RSI) resulting in -13% portfolio loss

ROOT CAUSE ANALYSIS:
--------------------
✅ Model had NO ticker information in input (already anonymous features)
❌ BUT output layer had FIXED positions:
   - Position 2 = always ENPH (first in ticker list)
   - Position 3 = always NI (second in ticker list)
   - Model learned "neuron #2 = profit" NOT "ENPH features = profit"

SOLUTION IMPLEMENTED:
---------------------

1. PURE PRICE SEQUENCES (like GPT)
   OLD: [batch, 30_days, 308_stocks, 3_features]
        Features: momentum_5d, volatility_20d, rsi_14d (hand-crafted)
   
   NEW: [batch, 60_days, 308_stocks, 1_feature]
        Feature: normalized price history only
   
   Why: Let transformer discover patterns (like GPT learns from tokens)
        No hand-crafted features that might bias learning

2. STOCK SHUFFLING DURING TRAINING
   - Each batch: randomly permute stock positions
   - Batch 1: [ENPH, NI, AAPL, ...] → outputs [2, 3, 4, ...]
   - Batch 2: [TSLA, AAPL, ENPH, ...] → outputs [2, 3, 4, ...]
   - Forces model to learn from PRICE PATTERNS, not POSITIONS
   
   Implementation:
   ```python
   stock_shuffle = torch.randperm(num_stocks)
   batch_X_shuffled = batch_X[:, :, stock_shuffle, :]
   batch_y_shuffled = batch_y[:, stock_shuffle]
   ```

3. LONGER HISTORY (60 days vs 30 days)
   - Memory: ~21 MB per batch (manageable)
   - Training time: 9x slower than 30 days (still reasonable)
   - Benefit: More price history for pattern recognition

FILES MODIFIED:
---------------

1. core/data_processor.py
   - Added extract_price_sequences() method
   - Returns [days, stocks, 1] normalized prices
   - Keeps old extract_anonymous_features() for backwards compatibility

2. core/model.py
   - Changed features_per_stock: 3 → 1
   - Input now expects single feature (price)

3. core/training_system.py
   - Changed lookback_days: 30 → 60
   - Modified train_model():
     • Uses extract_price_sequences() instead of extract_anonymous_features()
     • Implements batch-wise stock shuffling
     • Sequence length: 30 → 60 days
   - Modified predict_action():
     • Uses extract_price_sequences() for inference
     • Lookback increased for data download

TRAINING PARAMETERS:
--------------------
- Sequence length: 60 days (up from 30)
- Batch size: 32
- Epochs: 150
- Learning rate: 8e-5
- Loss: EnhancedProfitLoss (loss_penalty=2.0, risk_penalty=0.005)
- Dropout: 0.15 (input), 0.2 (residual), 0.25 (decision head)
- MC Dropout: 20 samples during inference
- Temperature: 5.0 during inference

EXPECTED IMPROVEMENTS:
----------------------
1. ✅ No position memorization (stock shuffling prevents it)
2. ✅ Better generalization (learns from price patterns, not hand-crafted features)
3. ✅ More diverse stock picks (not stuck on ENPH/NI)
4. ✅ Richer patterns (60 days vs 30 days of history)

MEMORY & PERFORMANCE:
---------------------
- Input tensor: 3.38 MB (60 days, 308 stocks, 1 feature)
- Attention memory: 7.91 MB (2 layers, quadratic in sequence length)
- Total: ~21 MB per batch
- Training time: ~9x slower than 30-day baseline (still manageable)

TO START TRAINING:
------------------
cd /home/ubuntu/GitHubProjects/laughing-umbrella-v2/core
/opt/aws_neuronx_venv_pytorch_2_8/bin/python debug_test.py

This will train from 2010-2024 and save:
  - models/trained_stock_trader.pth
  - models/feature_scaler.pkl

TESTING NEW MODEL:
------------------
After training completes:
1. Run: python test_month.py
2. Check if stock picks are more diverse
3. Verify no single stock dominates (>30% of picks = red flag)
4. Monitor portfolio returns (target: positive or break-even)

KEY INSIGHT:
------------
"Training on price sequences with position shuffling = GPT approach"
The model sees patterns, not identities. Just like GPT predicts next token
from sequence patterns, this model predicts best stock from price patterns.

================================================================================
